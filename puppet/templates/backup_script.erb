#!/bin/bash
# Script de backup automático generado por Puppet
# <%= @timestamp %>

# Configuración
BACKUP_DIR="/opt/platform/backups"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=7

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Crear directorio de backup
mkdir -p "$BACKUP_DIR"

log "Iniciando backup de la plataforma..."

# Backup de base de datos
log "Realizando backup de PostgreSQL..."
cd /opt/platform/remote-execution-platform
docker-compose exec -T postgres pg_dump -U platform_user remote_execution > "$BACKUP_DIR/postgres_$DATE.sql"

if [ $? -eq 0 ]; then
    log "Backup de PostgreSQL completado"
    gzip "$BACKUP_DIR/postgres_$DATE.sql"
else
    error "Error en backup de PostgreSQL"
fi

# Backup de Redis
log "Realizando backup de Redis..."
docker-compose exec -T redis redis-cli BGSAVE
sleep 5
docker cp $(docker-compose ps -q redis):/data/dump.rdb "$BACKUP_DIR/redis_$DATE.rdb"

if [ $? -eq 0 ]; then
    log "Backup de Redis completado"
    gzip "$BACKUP_DIR/redis_$DATE.rdb"
else
    error "Error en backup de Redis"
fi

# Backup de configuración
log "Realizando backup de configuración..."
tar -czf "$BACKUP_DIR/config_$DATE.tar.gz" \
    /opt/platform/remote-execution-platform/.env \
    /opt/platform/remote-execution-platform/docker-compose.yml \
    /opt/platform/ssl/ \
    /etc/puppetlabs/code/environments/production/hieradata/

if [ $? -eq 0 ]; then
    log "Backup de configuración completado"
else
    error "Error en backup de configuración"
fi

# Backup de logs importantes
log "Realizando backup de logs..."
tar -czf "$BACKUP_DIR/logs_$DATE.tar.gz" \
    /opt/platform/logs/ \
    --exclude="*.tmp" \
    --exclude="*.lock"

if [ $? -eq 0 ]; then
    log "Backup de logs completado"
else
    warn "Error en backup de logs (no crítico)"
fi

# Limpiar backups antiguos
log "Limpiando backups antiguos (más de $RETENTION_DAYS días)..."
find "$BACKUP_DIR" -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "*.rdb.gz" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

# Verificar espacio en disco
DISK_USAGE=$(df /opt/platform | tail -1 | awk '{print $5}' | sed 's/%//')
if [ $DISK_USAGE -gt 85 ]; then
    warn "Uso de disco alto: ${DISK_USAGE}%"
fi

log "Backup completado. Archivos en: $BACKUP_DIR"
ls -lh "$BACKUP_DIR"/*$DATE*