"""
Bot de Telegram para la Plataforma de Ejecuci√≥n Remota
Permite autenticaci√≥n y ejecuci√≥n de comandos remotos
"""

import os
import logging
import asyncio
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import httpx
from fastapi import FastAPI
import uvicorn
import threading

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuraci√≥n
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://backend:8000")

if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
    logger.error("TELEGRAM_BOT_TOKEN no configurado")
    exit(1)

# FastAPI para health check
health_app = FastAPI()

@health_app.get("/health")
async def health():
    return {"status": "healthy", "service": "telegram-bot"}

# Comandos del bot
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start"""
    user = update.effective_user
    welcome_message = f"""
üöÄ ¬°Bienvenido a la Plataforma de Ejecuci√≥n Remota!

Hola {user.first_name}, soy tu asistente para ejecutar c√≥digo de forma segura.

üìã **Comandos disponibles:**
/start - Mostrar este mensaje
/help - Ayuda detallada
/login - Autenticarse en la plataforma
/execute - Ejecutar c√≥digo
/status - Ver estado de ejecuciones
/profile - Ver tu perfil

üîí **Seguridad:**
- Todas las ejecuciones son sandboxeadas
- L√≠mites de tiempo y recursos aplicados
- Logs completos de actividad

¬°Comienza con /login para autenticarte!
    """
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help"""
    help_text = """
üìö **Ayuda - Plataforma de Ejecuci√≥n Remota**

üîê **Autenticaci√≥n:**
/login - Iniciar sesi√≥n con tus credenciales

‚ö° **Ejecuci√≥n de C√≥digo:**
/execute <lenguaje> <c√≥digo> - Ejecutar c√≥digo
Ejemplo: `/execute python print("Hello World")`

Lenguajes soportados:
‚Ä¢ Python üêç
‚Ä¢ Bash üêö
‚Ä¢ PowerShell üíª
‚Ä¢ JavaScript üü®
‚Ä¢ SQL üóÑÔ∏è

üìä **Informaci√≥n:**
/status - Ver tus ejecuciones recientes
/profile - Ver informaci√≥n de tu cuenta

üõ°Ô∏è **L√≠mites de Seguridad:**
‚Ä¢ Tiempo m√°ximo: 5 minutos
‚Ä¢ Memoria m√°xima: 512MB
‚Ä¢ CPU m√°ximo: 50%
‚Ä¢ Sin acceso a red externa

‚ùì **Soporte:**
Si tienes problemas, contacta al administrador.
    """
    await update.message.reply_text(help_text)

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /login"""
    user = update.effective_user
    
    # Placeholder para autenticaci√≥n
    login_message = f"""
üîê **Proceso de Autenticaci√≥n**

Usuario: {user.username or user.first_name}
ID: {user.id}

Para completar la autenticaci√≥n:
1. Ve a la plataforma web
2. Genera un token de Telegram
3. Env√≠a el token aqu√≠

Estado: ‚è≥ Pendiente de implementaci√≥n
    """
    await update.message.reply_text(login_message)

async def execute_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /execute"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso: /execute <lenguaje> <c√≥digo>\n"
            "Ejemplo: /execute python print('Hello World')"
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå Debes especificar el lenguaje y el c√≥digo\n"
            "Ejemplo: /execute python print('Hello World')"
        )
        return
    
    language = context.args[0].lower()
    code = " ".join(context.args[1:])
    
    # Placeholder para ejecuci√≥n
    execution_message = f"""
‚ö° **Ejecuci√≥n de C√≥digo**

Lenguaje: {language}
C√≥digo: `{code}`

üîÑ Estado: En cola...
‚è±Ô∏è Tiempo estimado: < 30s

ID de ejecuci√≥n: exec_placeholder_{datetime.now().strftime('%Y%m%d_%H%M%S')}

‚è≥ Ejecutando... (implementaci√≥n pendiente)
    """
    
    message = await update.message.reply_text(execution_message)
    
    # Simular ejecuci√≥n
    await asyncio.sleep(2)
    
    result_message = f"""
‚úÖ **Ejecuci√≥n Completada**

Lenguaje: {language}
C√≥digo: `{code}`

üì§ **Salida:**
```
Hello World (placeholder)
```

‚è±Ô∏è Tiempo: 0.1s
üíæ Memoria: 12MB
üîÑ Estado: Completado
    """
    
    await message.edit_text(result_message)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /status"""
    status_message = """
üìä **Estado de Ejecuciones**

üë§ Usuario: No autenticado
üîÑ Ejecuciones hoy: 0
‚è±Ô∏è Tiempo total usado: 0s
üíæ Memoria promedio: 0MB

üìà **Ejecuciones Recientes:**
(No hay ejecuciones)

üîó Para ver m√°s detalles, visita la plataforma web.
    """
    await update.message.reply_text(status_message)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /profile"""
    user = update.effective_user
    profile_message = f"""
üë§ **Tu Perfil**

**Informaci√≥n de Telegram:**
‚Ä¢ Nombre: {user.first_name} {user.last_name or ''}
‚Ä¢ Usuario: @{user.username or 'No definido'}
‚Ä¢ ID: {user.id}

**Estado de la Cuenta:**
‚Ä¢ Autenticado: ‚ùå No
‚Ä¢ Nivel: Invitado
‚Ä¢ Ejecuciones disponibles: 0

**L√≠mites:**
‚Ä¢ Tiempo por ejecuci√≥n: 5 min
‚Ä¢ Memoria m√°xima: 512MB
‚Ä¢ Ejecuciones por d√≠a: 100

üîó Aut√©nticate para acceder a todas las funciones.
    """
    await update.message.reply_text(profile_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manejar mensajes de texto"""
    message_text = update.message.text
    
    if message_text.startswith('/'):
        await update.message.reply_text(
            "‚ùì Comando no reconocido. Usa /help para ver comandos disponibles."
        )
    else:
        await update.message.reply_text(
            "üí¨ Mensaje recibido. Usa /execute para ejecutar c√≥digo o /help para ayuda."
        )

def run_health_server():
    """Ejecutar servidor de health check"""
    uvicorn.run(health_app, host="0.0.0.0", port=8001, log_level="warning")

async def main() -> None:
    """Funci√≥n principal del bot"""
    logger.info("Iniciando bot de Telegram...")
    
    # Crear aplicaci√≥n
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Configurar comandos
    commands = [
        BotCommand("start", "Iniciar bot"),
        BotCommand("help", "Mostrar ayuda"),
        BotCommand("login", "Autenticarse"),
        BotCommand("execute", "Ejecutar c√≥digo"),
        BotCommand("status", "Ver estado"),
        BotCommand("profile", "Ver perfil"),
    ]
    
    await application.bot.set_my_commands(commands)
    
    # Registrar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(CommandHandler("execute", execute_code))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("Bot configurado, iniciando polling...")
    
    # Iniciar bot
    await application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    # Iniciar servidor de health check en thread separado
    health_thread = threading.Thread(target=run_health_server, daemon=True)
    health_thread.start()
    
    # Iniciar bot
    asyncio.run(main())