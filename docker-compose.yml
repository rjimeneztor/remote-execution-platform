version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: platform_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - platform_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: platform_redis
    command: redis-server --appendonly yes
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - platform_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES}
      - MAX_EXECUTION_TIME=${MAX_EXECUTION_TIME}
      - MAX_MEMORY_MB=${MAX_MEMORY_MB}
      - MAX_CPU_PERCENT=${MAX_CPU_PERCENT}
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs/backend:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    networks:
      - platform_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bot de Telegram
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: platform_telegram_bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - BACKEND_URL=http://backend:8000
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./logs/telegram:/app/logs
    networks:
      - platform_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Ejecutor de código
  code-executor:
    build:
      context: ./code-executor
      dockerfile: Dockerfile
    container_name: platform_code_executor
    environment:
      - REDIS_URL=${REDIS_URL}
      - MAX_EXECUTION_TIME=${MAX_EXECUTION_TIME}
      - MAX_MEMORY_MB=${MAX_MEMORY_MB}
      - MAX_CPU_PERCENT=${MAX_CPU_PERCENT}
    volumes:
      - ./logs/executor:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - platform_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    privileged: true

  # Frontend Web
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: platform_frontend
    environment:
      - REACT_APP_API_URL=https://localhost/api
      - REACT_APP_WS_URL=wss://localhost/ws
    volumes:
      - ./frontend/build:/usr/share/nginx/html
    networks:
      - platform_network
    restart: unless-stopped

  # Nginx (API Gateway y Proxy Reverso)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - platform_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Servicio de notificaciones
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: platform_notifications
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./logs/notifications:/app/logs
    networks:
      - platform_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus (Monitoreo)
  prometheus:
    image: prom/prometheus:latest
    container_name: platform_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    ports:
      - "9090:9090"
    networks:
      - platform_network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: platform_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - platform_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Node Exporter (Métricas del sistema)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: platform_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - platform_network
    restart: unless-stopped

networks:
  platform_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: